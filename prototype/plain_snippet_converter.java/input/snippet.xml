<?xml version="1.0" encoding="UTF-8"?>
<snippet>
  <paragraph>
    In software engineering, SOLID is a mnemonic acronym for five design principles intended to make object-oriented designs more understandable, flexible, and maintainable.
    The principles are a subset of many principles promoted by American software engineer and instructor Robert C. Martin, first introduced in his 2000 paper Design Principles and Design Patterns discussing software.
  </paragraph>
  <paragraph>
    The SOLID ideas are
  </paragraph>
  <list>
      The Single-responsibility principle: "There should never be more than one reason for a class to change." In other words, every class should have only one responsibility.
      The Openâ€“closed principle: "Software entities ... should be open for extension, but closed for modification."
      The Liskov substitution principle: "Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it."
      The Interface segregation principle: "Clients should not be forced to depend upon interfaces that they do not use."
      The Dependency inversion principle: "Depend upon abstractions, [not] concretions."
  </list>
  <paragraph>
    The SOLID acronym was introduced later, around 2004, by Michael Feathers.
  </paragraph>
  <paragraph>
    Although the SOLID principles apply to any object-oriented design, they can also form a core philosophy for methodologies such as agile development or adaptive software development.
  </paragraph>
  <source>
    https://en.wikipedia.org/wiki/SOLID
  </source>
</snippet>
